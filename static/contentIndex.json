{"1-基础语法/1-Java/java操作音频mp3和amr格式转换":{"title":"音频mp3和amr格式转换","links":[],"tags":["java","mp3","amr"],"content":"一、问题 §\n目前大部分java方式操作音频格式转换的都需要安装和配置ffmpeg文件，否则可能会报编/解码器丢失的错误。该方式在本机执行还可以，但是真正运用到生产，由于涉及到扩缩容等问题，真要在生产环境再手动安装ffmpeg就很不方便。该种方式可参考https://github.com/dadiyang/jave\n这里推荐一种配置pom依赖的方式解决音频文件转换问题，亲测可用。\n二、添加依赖 §\npom.xml&lt;!-- 经测试3.3.1版本在转码时会出现问题，建议降低版本 --&gt; \n&lt;jave.version&gt;2.4.4&lt;/jave.version&gt;\n \n \n&lt;!-- 该依赖包含一下全部依赖 --&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;ws.schild&lt;/groupId&gt;  \n    &lt;artifactId&gt;jave-all-deps&lt;/artifactId&gt;  \n    &lt;version&gt;${jave.version}&lt;/version&gt;  \n&lt;/dependency&gt;\n \n&lt;!-- 或 --&gt; \n \n&lt;!-- jave-core --&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;ws.schild&lt;/groupId&gt;  \n    &lt;artifactId&gt;jave-core&lt;/artifactId&gt;  \n    &lt;version&gt;${jave.version}&lt;/version&gt;   \n&lt;/dependency&gt;  \n  \n&lt;!-- 操作系统编码器包 选择对应环境--&gt;  \n&lt;!-- MacOS --&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;ws.schild&lt;/groupId&gt;  \n    &lt;artifactId&gt;jave-native-osx64&lt;/artifactId&gt;  \n    &lt;version&gt;${jave.version}&lt;/version&gt;  \n&lt;/dependency&gt;\n&lt;!-- Linux --&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;ws.schild&lt;/groupId&gt;  \n    &lt;artifactId&gt;jave-native-linux64&lt;/artifactId&gt;  \n    &lt;version&gt;${jave.version}&lt;/version&gt;  \n&lt;/dependency&gt;\n&lt;!-- Windows --&gt; \n&lt;dependency&gt;  \n    &lt;groupId&gt;ws.schild&lt;/groupId&gt;  \n    &lt;artifactId&gt;jave-nativebin-win64&lt;/artifactId&gt;  \n    &lt;version&gt;${jave.version}&lt;/version&gt;  \n&lt;/dependency&gt;\n三、格式转换 §\n音频格式转换代码public static void convertAudio(File source, File target) {  \n    AudioAttributes audio = new AudioAttributes();  \n    //audio.setCodec(&quot;libmp3lame&quot;);//mp3  \n\t//audio.setCodec(&quot;libopencore_amrnb&quot;);//amr-nb  \n\taudio.setCodec(&quot;libvo_amrwbenc&quot;);//amr-wb  \n\t//audio.setCodec(&quot;pcm_s16le&quot;);//wav  \n\taudio.setChannels(1);  \n\taudio.setSamplingRate(16000); \n    EncodingAttributes attrs = new EncodingAttributes();  \n    //attrs.setFormat(&quot;mp3&quot;);  \n    attrs.setFormat(&quot;amr&quot;);  //转换格式\n    attrs.setAudioAttributes(audio);  \n    Encoder encoder = new Encoder();  \n    try {  \n        MultimediaObject multimediaObject  = new MultimediaObject(source);  \n        encoder.encode(multimediaObject,target, attrs);  \n    } catch (IllegalArgumentException | EncoderException e) {  \n        e.printStackTrace();  \n    }  \n}\n查看所支持的codec种类public static void codec() {  \n    Encoder encoder = new Encoder();  \n    try {  \n        for (int i = 0; i &lt; encoder.getAudioEncoders().length; i++) {  \n            System.out.println(encoder.getAudioEncoders()[i].toString());  \n        }  \n    } catch (EncoderException e) {  \n        e.printStackTrace();  \n    }  \n}\n查看支持的音频格式种类public static void encodingFormats() {  \n    Encoder encoder = new Encoder();  \n    try {  \n        for (int i = 0; i &lt; encoder.getSupportedEncodingFormats().length; i++) {  \n            System.out.println(encoder.getSupportedEncodingFormats()[i].toString());  \n        }  \n    } catch (EncoderException e) {  \n        e.printStackTrace();  \n    }  \n}\n四、源码地址 §\nMeidanlong/all-in-one"},"1-基础语法/2-Python/Python基本数据类型":{"title":"基本数据类型","links":[],"tags":["python"],"content":"\n一、数字 §\n二、组 §\n1、序列 §\n1.1、字符串 §\n1.2、列表 §\n4、符号 §\n在Python中，*符号有两个主要的用途：\n\n作为数学运算符，表示乘法。例如，2 * 3的结果是6。\n在函数调用和定义中，表示可变数量的位置参数。你可以使用*来将一个列表或元组的元素作为位置参数传递给一个函数，或者在函数定义中接收任意数量的位置参数。\n举例：\n\n函数调用def greet(greeting, name):\n   print(f&quot;{greeting}, {name}!&quot;)\n \nparams = [&quot;Hello&quot;, &quot;Alice&quot;]\ngreet(*params)  # 输出：Hello, Alice!\n函数定义def print_numbers(*args):\n   for number in args:\n       print(number)\n \nprint_numbers(1, 2, 3, 4, 5)  \n# 输出：\n# 1\n# 2\n# 3\n# 4\n# 5"},"1-基础语法/3-Git/切换Git远程仓库":{"title":"切换Git远程仓库","links":[],"tags":["git"],"content":"一、切换远程仓库地址 §\n1、直接修改远程路径 §\ngit remote set-url origin URL\n\n2、先删除再添加 §\n# 删除现有库\ngit remote rm origin\n# 添加新库\ngit remote add origin url\n\n二、查看远程仓库地址 §\ngit remote -v\n"},"1-基础语法/3-Git/致命错误：位于未检出的子模组":{"title":"致命错误：位于未检出的子模组","links":[],"tags":["git","qa"],"content":"一、表象 §\n\n二、解决 §\n# 清除git缓存\ngit rm -r --cache ."},"1-基础语法/3-Git/致命错误：拒绝合并无关的历史":{"title":"致命错误：拒绝合并无关的历史","links":[],"tags":["git","qa"],"content":"一、表象 §\n\n二、解决 §\ngit pull origin master --allow-unrelated-histories"},"1-基础语法/3-Git/远程解包失败-index-pack-failed":{"title":"远程解包失败 index-pack failed","links":[],"tags":["git","qa"],"content":"一、现象 §\n\n二、原因 §\nGit在解压缩（解包）对象时出现了异常，导致推送失败。\n三、解决 §\n清除本地缓存git gc --prune=now\n再次执行后续命令即可。"},"1-基础语法/3-Git/错误：无法推送一些引用到...":{"title":"错误：无法推送一些引用到...","links":["1-基础语法/3-Git/致命错误：拒绝合并无关的历史"],"tags":["git","qa"],"content":"一、表象 §\n\n二、解决 §\n同致命错误：拒绝合并无关的历史"},"10-人工智能/2-大语言模型/1-OpenAI/OpenAI注册和ChatGPT使用":{"title":"OpenAI的注册和使用","links":[],"tags":["aigc","openai","chatgpt"],"content":"一、注册OpenAI §\n注册地址\n二、购买虚拟手机号 §\nSMS-Activate是在线接受短信的虚拟号码服务\n\n1、注册虚拟手机账户 §\n使用长期有效的邮箱进行注册\n2、激活账号 §\n\n用户下方选择充值，支付宝充值1美元\n\n左侧选择openAI服务，选择印度（价格更低）\n\n\n三、OpenAI验证手机号 §\n虚拟手机号获取短信，选择激活页面等待短信\n\n四、登陆成功 §\n\n五、使用ChatGPT §\nchatGPT地址\n\n六、获取API Keys §\n点击右上角个人用户—View API keys\n\n\n总结 §\n以上主要内容：\n\n购买虚拟手机号\n注册OpenAI账号\n简单使用ChatGPT\n"},"10-人工智能/3-稳定扩散/1-Stable-Diffusion/Stable-Diffusion扩散模型":{"title":"Stable Diffusion扩散模型","links":[],"tags":[],"content":"扩散模型（diffusion model）包括两个过程：前向过程（forward process）和反向过程（reverse process）\n\n无论是前向过程还是反向过程都是一个参数化的马尔可夫链（Markov chain）\n\n简单地说，扩散模型的工作原理是通过连续添加高斯噪声来破坏训练数据，然后学习通过反转这种噪声过程来恢复数据。\n扩散过程，从字面上理解就是，像分子运动一样，一点点改变\n放到图像里就是，最开始噪声一般的图像，它的像素值一点点改变，或者说叫”运动“，直到最后改变成了有意义的图像\n\n\n\n扩散模型由两部分构成：学习过程，推理过程，上面的去噪过程就是推理过程\n一、学习过程 §\n\n\n首先我们拿到要学习的图片I\n然后用固定的方法添加一个噪声 N ，并把这个噪声 N 保存下来\n把噪声 N 扔给我们的神经网络，神经网络会返回一个同尺寸的噪声 PN\n比较神经网络预测的噪声 PN 和 N 数学尺度上的”差距” ，这个差距我们记为 D\n把这个差距 D 扔给一个迭代器，它会告诉神经网络应该怎么调整它里面众多的神经参数来缩小 N 和 PN的差距。\n最后重复不断这个过程，直到 D 的值足够小\n\n二、推理过程 §\n\n\n首先我们随机生成一个噪声 RD\n把 RD 喂给已经学习好的 神经网络\n得到神经网络给出的噪声 PD\n用原始的噪声 RD根据 PD做运动，得到预测的图片I。这里的运动可以简单理解为原始噪声RD的数值减去预测噪声PD。实际上是做了一些数学变化，而非简单的加减。\n判断做完运动得到的预测I是否符合我们的预期，如果符合，那就完成预测啦！否则继续6\n如果运动还不够，则刚刚得到的预测图片I成为新的噪声RD，进行下一轮运动，直到得到我们需要的图片\n\n请注意，我们到目前为止描述的扩散过程在不使用任何文本数据的情况下生成图像。因此，如果我们部署这个模型，它将生成漂亮的图像，但我们无法控制它是金字塔还是猫或其他任何东西的图像\n"},"10-人工智能/3-稳定扩散/1-Stable-Diffusion/Stable-Diffusion简介":{"title":"Stable Diffusion简介","links":[],"tags":["sd","aigc"],"content":""},"10-人工智能/4-AIGC/数字人/GeneFace":{"title":"GeneFace环境搭建","links":[],"tags":["aigc"],"content":"自研路线 §\n一、自研流程图 §\n\n一、安装CUDA §\n二、安装Python库 §\n三、准备3DMM模型 §\n1、下载 3DMM model §\n\n在这个链接申请BFM2009 model.\n\n提交申请—等待邮件\n获取到邮件中的跳转链接已经用户名密码\n\n下载模型压缩包BaselFaceModel.tgz，将其解压，解压后获得其中 01_MorphableModel.mat保存到 ./deep_3drecon/BFM/文件夹\n\n\n\n"},"10-人工智能/4-AIGC/数字人/HeyGen":{"title":"HeyGen简介","links":[],"tags":["aigc"],"content":""},"3-服务框架/1-后端/第三方/腾讯云/图片处理":{"title":"腾讯云-图片处理","links":[],"tags":["腾讯云"],"content":"一、图片编辑 §\n缩放 §\n图片处理 缩放-API 文档-文档中心-腾讯云\n裁剪 §\n图片处理 裁剪-API 文档-文档中心-腾讯云\n格式转换 §\n图片处理 格式转换-API 文档-文档中心-腾讯云\n二、图片水印 §\n图片水印 §\n数据万象 图片水印-API 文档-文档中心-腾讯云\n图片水印举例https://obj.pipi.cn/basicdatacrawler/basicdatacrawler//fb7386d702fddd11e587a9d8ed499b93abc41.png?imageMogr2/thumbnail/2500x2500&gt;&amp;watermark/1/image/aHR0cHM6Ly9teWJ1Y2tldC0xMjUxMjQ2MTA0LmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS9haWdjLW1hbGlhbmcvZmI3Mzg2ZDcwMmYzMzhlN2FhZWNkODI2M2U5MDZmZDljMjQ1NC5wbmc/gravity/southwest/dx/20/dy/20/\n文字水印 §\n图片处理 文字水印-API 文档-文档中心-腾讯云\n文字水印举例https://obj.pipi.cn/basicdatacrawler/basicdatacrawler//fb7386d702fddd11e587a9d8ed499b93abc41.png?imageMogr2/thumbnail/2500x2500&gt;&amp;watermark/2/text/QUnkvZzlm74=/fontsize/20/fill/I0ZGRkZGRg==/gravity/southwest/dx/20/dy/20/\n三、背景色 §\n图片主色调（背景色） §\n图片处理 获取图片主色调-API 文档-文档中心-腾讯云"},"3-服务框架/2-前端/NPM使用":{"title":"NPM使用","links":[],"tags":[],"content":""},"index":{"title":"梅丹隆的博客","links":[],"tags":[],"content":"Hi there ~\n我是梅丹隆\nJava 开发工程师\n目前就职于猫眼娱乐"}}